#################################################################
# Name: Caleb Matherne
# Date: 4/2/2022
# Description: Room Adventure... Revolution Pi Activity
#################################################################

# ADDED :

# The things I added are descriptions for the grabbables, a use action
# to use grabbables to progress to other rooms, optional auto generated 
# room descriptions and user actions, custom room descriptions and use 
# descriptions, room and item descriptions that change when the user 
# takes grabbables

######################################################################

# Things I could have done better :

# I probably could have used far less if statements through other
# methods for cleaner code, but oh well. It's ugly but it works.

# Think a bit harder on the conclusion to make it more coherent

# Give more attention to the auto generated descriptions, especially
# in rooms 3-4 because lots of the clues are in the details not
# present in the auto generated descriptions.

# Start from the ground up when addapting my older code to work with
# tkinter. Lots of things had to be changed, added, and deleted. There
# is probably lots of residual code that doesnt do anything but was
# needed before. I think some parallel lists werent converted to
# dictionaries, mostly because they pretty small and too intigrated
# to find and change all of them throughout all 700+ lines. I did
# change the major parallel lists into dictionaries though. 

# Playtest more thoroughly to find more bugs and problems. Also test
# autogenerated descriptions more. They were the main method I was
# going to use to inform the player of their surroundings, but I
# gradualy started getting more ideas for details in the custom room
# descriptions to provide the majority of the hints for progression.

######################################################################

# TUTORIAL (SPOILERS)
# Grab key, use key, go south, grab book, go north, use book, go east, 
# grab lighter, use torn_book, use lighter, use page, go south, 
# grab 6-pack, use 6-pack, go south.

######################################################################

from tkinter import *
import random

customRoomDesc = False

# the room class
class Room:
    # the constructor
    def __init__(self, name, rdesc, ruse, image):
        # rooms have a name, an image (the name of a file),
        # exits (e.g., south), exit locations
        # (e.g., to the south is room n), items (e.g., table),
        # item descriptions (for each item), and grabbables
        # (things that can be taken into inventory)
        self.name = name
        self.rdesc = rdesc
        self.ruse = ruse
        self.image = image
        self.exits = {}
        self.items = {}
        self.grabs = {}
        self.npc = {}

    # getters and setters for the instance variables
    @property
    def name(self):
        return self._name
    @name.setter
    def name(self, value):
        self._name = value

    @property
    def rdesc(self):
        return self._rdesc
    @rdesc.setter
    def rdesc(self, value):
        self._rdesc = value

    @property
    def ruse(self):
        return self._ruse
    @ruse.setter
    def ruse(self, value):
        self._ruse = value

    @property
    def image(self):
        return self._image
    @image.setter
    def image(self, value):
        self._image = value

    @property
    def exits(self):
        return self._exits
    @exits.setter
    def exits(self, value):
        self._exits = value

    @property
    def items(self):
        return self._items
    @items.setter
    def items(self, value):
        self._items = value

    @property
    def grabs(self):
        return self._grabs
    @grabs.setter
    def grabs(self, value):
        self._grabs = value

    @property
    def npc(self):
        return self._npc
    @npc.setter
    def npc(self, value):
        self._npc = value

    # adds an exit to the room
    # the exit is a string (e.g., north)
    # the room is an instance of a room
    def addExit(self, exit, room):
        # append the exit and room to the appropriate
        # dictionary
        self._exits[exit] = room

    # adds an item to the room
    # the item is a string (e.g., table)
    # the desc is a string that describes the item (e.g., it is
    # made of wood)
    def addItem(self, item, desc):
        # append the item and description to the appropriate
        # dictionary
        self._items[item] = desc

    def delItem(self, item):
        del self._items[item]

    # adds a grabbable item to the room
    # the item is a string (e.g., key)
    def addGrab(self, grab, desc):
        # append the item to the list
        self._grabs[grab] = desc

    # removes a grabbable item from the room
    # the item is a string (e.g., key)
    def delGrab(self, grab):
        # remove the item from the list
        del self._grabs[grab]

    # returns a string description of the room
    def __str__(self):
        if customRoomDesc:
            s = self.rdesc + "\n"
        else:
            s = f"You find yourself in {self.name} "
            #Doors
            if len(list(self.items.keys())) == 0:
                s += "with no doors. "
            elif len(list(self.items.keys())) == 1:
                s += f"with a single door leading {list(self.exits.keys())[0]}. "
            elif len(list(self.items.keys())) == 2:
                s += f"with doors leading to the {list(self.exits.keys())[0]} and to the {list(self.exits.keys())[1]}. "
            else:
                s += "with doors leading "
                for i in range(len(list(self.exits.keys()))-1):
                    s += f"to the {list(self.exits.keys())[i]}, "
                s += f"and to the {list(self.exits.keys())[-1]}. "

            #Items
            s += "As you look around, you can spot "
            if len(list(self.items.keys())) == 0:
                s += "nothing."
            elif len(list(self.items.keys())) == 1:
                s += f"a {list(self.items.keys())[0]}. "
            elif len(list(self.items.keys())) ==2:
                s += f"a {list(self.items.keys())[0]} and a {list(self.items.keys())[1]}. "
            else:
                for i in range(len(list(self.items.keys()))-1):
                    s += f"a {list(self.items.keys())[i]}, "
                s += f"and a {list(self.items.keys())[-1]}. "
        return s



# the game class
# inherits from the Frame class of Tkinter
class Game(Frame):
    # the constructor
    def __init__(self, parent):
        # call the constructor in the superclass
        Frame.__init__(self, parent)

    # creates the rooms
    def createRooms(self):
        r1 = Room("Room 1", "You find yourself in a bright room with what seems to be once-was furniture \
scattered about the corners of the room and covered with a blanket of dust. The setting sun's light \
illuminates the wall through an opposing window, catching specs of floating dust falling from the \
creaking, wooden ceiling. Brown stains drip from the wall's green wallpapper, some of which is torn, \
revealing the walls innards. The only things not desheveled and unkempt are a wooden table and \
chair in the center of the room. Odd... Given the state of the room, the two look almost brand new \
if it weren't for the the sunbleached sides nearest to the window. There are two doors: one that \
looks to be ajar to the east, and another shut to the south.", ["key", "book","6-pack"],"room1.gif")
        r2 = Room("Room 2", "You are in a cold room that seems to at one point served as a living \
room. An intricate fireplace made of carefully placed stones and bricks is the first to catch \
your eye. The feature is barren from any decoration, still with black soot staining the undersides \
of the overhanging bricks and spent ashes inside. An intact lighter lays at it's base on the floor. \
It was definitly well used. Maybe you could find something flamable to burn to heat the room. From \
admirring the fire place, you find yourself atop a rug that spans nearly the entire length of the \
room. All along the sides are tied knots, fraid and desheveled. It's pattern resembles something \
that you would see on the back of some traditional playing card, but with far more detail. \
Something about it looks to be foreign-made. There are two doors: the one you just came from to \
the west, and another shut to the south.", ["torn_book","lighter","page","6-pack"],"room2.gif")
        r3 = Room("Room 3", "This room reaks of rot. Half-standing bookshelves line the walls, but \
all of the books are either missing or have been torn apart and discarded at their feet. Stray \
pages that are notated in a language that isn't familiar to you litter the ground. A small desk \
occupies a corner of the room near the far wall. Atop the desk sits a statue of some sort \
that cradles the only intact book in the room. The torn cover features letters that you can read \
but lack enough to provide any valuable information. The other parts of the cover might be amidst \
the graveyard of skewed papers and spines, but it's no use searching for it. The only door is \
to the the north, the one you came from.", ["6-pack"],"room3.gif")
        r4 = Room("Room 4", "You find yourself in a near pitch black room, with only the lightfrom \
the fireplace leaking past the door to dimly light the room. The walls and whatever are along them are \
shaded beyond recognition. The only identifiable object in the room is some sort of modified brew rig \
directly opposite the door you came from. From the looks of it, the purpose of the additions seems to \
allow for the ability to add precise measurements of solutions to the brew. Alchemy maybe? A 6-pack of \
finished brew sits at it's base. There is suprisingly little that you can see within the once \
frightening room.", ["6-pack"],"room4.gif")

        # add exits to room 1
        r1.addExit("east", r2) # to the east of room 1 is room 2
        r1.addExit("south", r3)
        # add grabbables to room 1
        r1.addGrab("key", "It is a golden key with intricate notched teeth in a pattern you've never seen before.")
        
        # add items to room 1
        r1.addItem("chair", "It is made of wicker and no one is sitting on it.")
        r1.addItem("table", "It is made of oak. A golden key rests on it.")

        # add exits to room 2
        r2.addExit("west", r1)
        r2.addExit("south", r4)
        # add grabbables to room 2
        r2.addGrab("lighter", "It's of a unique design and definitely very old.")
        
        # add items to room 2
        r2.addItem("rug", "It is nice and Indian. It also needs to be vacuumed.")
        r2.addItem("fireplace", "It is full of ashes. A lighter rests beside it.")
        r2.addItem("ashes", "Some spent ashes. Maybe if you find something flammable to burn, you could start the fire.")

        # add exits to room 3
        r3.addExit("north", r1)
        r3.addExit("east", r4)
        # add grabbables to room 3
        r3.addGrab("book", "The cover is too torn up to read. Many pages are missing.")
        
        # add items to room 3
        r3.addItem("bookshelves", "They are empty. Go figure.")
        r3.addItem("statue", "It's of a weird figure holding a book.")
        r3.addItem("desk", "The statue is resting on it. So is a book.")
        # add exits to room 4
        r4.addExit("north", r2)
        r4.addExit("south", None)

        # add grabbables to room 4
        r4.addGrab("6-pack", "A strange smell is coming from it. Should you drink it?")
        
        # add items to room 4
        r4.addItem("brew_rig", "It looks to be heavily modified for alchemic purposes. A 6-pack is resting beside it.")

        # set room 1 as the current room at the beginning of the
        # game
        Game.currentRoom = r1
        # initialize the player's inventory
        Game.inventory = {}

    # sets up the GUI
    def setupGUI(self):
        # organize the GUI
        self.pack(fill=BOTH, expand=1)
        # setup the player input at the bottom of the GUI
        # the widget is a Tkinter Entry
        # set its background to white and bind the return key to the
        # function process in the class
        # push it to the bottom of the GUI and let it fill
        # horizontally
        # give it focus so the player doesn't have to click on it
        Game.player_input = Entry(self, bg="white")
        Game.player_input.bind("<Return>", self.process)
        Game.player_input.pack(side=BOTTOM, fill=X)
        Game.player_input.focus()

        # setup the image to the left of the GUI
        # the widget is a Tkinter Label
        # don't let the image control the widget's size
        img = None
        Game.image = Label(self, width=WIDTH // 2, image=img)
        Game.image.image = img
        Game.image.pack(side=LEFT, fill=Y)
        Game.image.pack_propagate(False)

        # setup the text to the right of the GUI
        # first, the frame in which the text will be placed
        text_frame = Frame(self, width=WIDTH // 2)
        # the widget is a Tkinter Text
        # disable it by default
        # don't let the widget control the frame's size
        Game.text = Text(text_frame, bg="lightgrey", state=DISABLED)
        Game.text.pack(fill=Y, expand=1)
        text_frame.pack(side=RIGHT, fill=Y)
        text_frame.pack_propagate(False)


    # set the current room image
    def setRoomImage(self):
        if (Game.currentRoom == None):
            # if dead, set the skull image
            Game.img = PhotoImage(file="skull.gif")
        else:
            # otherwise grab the image for the current room
            Game.img = PhotoImage(file=Game.currentRoom.image)

        # display the image on the left of the GUI
        Game.image.config(image=Game.img)
        Game.image.image = Game.img

    # sets the status displayed on the right of the GUI
    def setStatus(self, status):
        # enable the text widget, clear it, set it, and disabled it
        Game.text.config(state=NORMAL)
        Game.text.delete("1.0", END)
        if (Game.currentRoom == None):
            # if dead, let the player know
            if customRoomDesc:
                Game.text.insert(END, "Left with very few options, you go to open the south door. You grasp the handle \
and turn. The door flies open outward into, into... into nothing. You peer your head out and find a room floating some \
distance downwards. Out of the only door on the side of the floating room, a person peers out looking down at another \
room somewhere below you, just like what you're doing. Could they be in the same situation you're in? Could they see you \
if they looked up? Could you see anything if you looked up? And sure enough, there was another floating room, just like \
the one below with someone peering out. But instead of looking down, they were gazing up. Can they not see me? Your \
memory lapses as you struggle to understand the situation and you loose you grip of the door frame. You're falling, and \
you're falling fast. You spin your body in an attempt to ragain control to land on the room you saw below you with the \
person looking down. They aren't in the doorway, but instead you spot them falling just like you are. But only they are \
falling now. You gaze helplessly from the doorway as they plummet. How did you get back here? You glance at the person \
above you only to find they are still in the doorway, still staring into the darkness above. You're falling again. It's \
as though you are both in the doorway and falling at the same time. That part of you that fell is gone now, gone to the \
abyss. The other part of you gains a vision of reading the words you are reading right now. You are reading your thoughts \
as you think them. That's so weird. Wait, you just thought that. And that. And that! This is creepy. Stop it. Get out of \
my head! Just stop reading!\n\nYou escaped.")
            else:
                Game.text.insert(END, "You are dead. The only thing you can do now is quit.\n")
        else:
            # otherwise, display the appropriate status
            Game.text.insert(END, status + "\n\n" +str(Game.currentRoom) + "\nYou are carrying: " + str(list(Game.inventory.keys())))
        Game.text.config(state=DISABLED)

    # play the game
    def play(self):
        # add the rooms to the game
        self.createRooms()
        # configure the GUI
        self.setupGUI()
        # set the current room
        self.setRoomImage()
        # set the current status
        self.setStatus("")

    # processes the player's input
    def process(self, event):
        global sixpack_IsUsed
        # grab the player's input from the input at the bottom of
        # the GUI
        userin = Game.player_input.get()
        # set the user's input to lowercase to make it easier to
        # compare the verb and noun to known values
        userin = userin.lower()

        #dictionaries
        actionhelp = {"help", "idk", "assist", "assistance", "?"}
        action0 = {"quit", "exit", "bye", "end"}
        action1 = {"go", "walk", "run", "continue"}
        action2 = {"look", "inspect", "obsverve"}
        action3 = {"take", "grab", "get", "steal", "pickup", "pick_up", "nab", "yoink", "stash", "stow"}
        action4 = {"use"}
        action5 = {"talk", "speak", "converse", "chat" }
        action6 = {"inventory", "inv", "bag", "backpack", "pack", "items"}

        # set a default response
        response = "I don't understand. Try verb noun. Valid verbs are go, look, and take"
        # exit the game if the player wants to leave (supports quit,
        # exit, and bye)
        if userin in(action0):
            exit(0)

        elif userin in(actionhelp):
            response = "<<< HELP PAGE >>>\n\
help - Available commands (You are here now).\n\tUSAGE : help \n\
go - Used to navigate around to other rooms.\n\tUSAGE : go <cardinal direction> \n\
look - Look at items in the room or inventory.\n\tUSAGE : look <item> \n\
take - Put item in inventory for later use.\n\tUSAGE : take <item> \n\
use - Use an item in your inventory.\n\tUSAGE : use <item> \n\
bag - View your items in your inventory.\n\tUSAGE : bag \n\
back - Exit your inventory.\n\tUSAGE : back \n\
quit - Quit the game and close the window\n\tUSAGE : quit \n\n\
NOTE : Most commands have alliases that do the same thing, such as go and walk, or take and grab, including many more!"
            
       
        # if the player is dead if goes/went south from room 4
        if (Game.currentRoom == None):
            # clear the player's input
            Game.player_input.delete(0, END)
            return

        # split the user input into words (words are separated by
        # spaces) and store the words in a list
        words = userin.split()

        # the game only understands two word inputs
        if (len(words) == 2):
            # isolate the verb and noun
            useract = words[0]
            userobj = words[1]

            # go action
            if useract in(action1):
                # set a default response
                response = "There is no door here."

                # check for valid exits in the current room
                if (userobj in Game.currentRoom.exits):
                    response = "There is no door here."
                    global key_IsUsed
                    global page_IsUsed
                    if Game.currentRoom.name == "Room 1" and userobj == "south" and key_IsUsed == False:
                        response = "The door is locked."
                    elif Game.currentRoom.name == "Room 2" and userobj == "south" and page_IsUsed == False:
                        response = "The door is locked with a combination lock."
                    elif Game.currentRoom.name == "Room 4" and userobj == "south" and sixpack_IsUsed == False:
                        response = "There is no door here."
                    elif Game.currentRoom.name == "Room 4" and userobj == "north" and sixpack_IsUsed == True:
                        response = "The door that used to be here has vanished"
                    elif userobj in(Game.currentRoom.exits):
                        Game.currentRoom = Game.currentRoom.exits[userobj]
                        # set the response (success)
                        response = f"You {useract} through the {userobj} door. "

            # look action
            elif useract in(action2):
                # set a default response
                response = f"You cannot find a {userobj}. You do not have {userobj}"

                # check for valid items in the current room
                if (userobj in Game.currentRoom.items or userobj in Game.currentRoom.grabs):
                    x = random.randint(0,2)
                    if x == 0: response = "Out of the corner of your eye, y"
                    elif x == 1: response = "After a quick glance, y"
                    elif x == 2: response = "Y"

                    x = random.randint(0,5)
                    if x == 0: response += "ou find "
                    elif x == 1: response += "ou spot "
                    elif x == 2: response += "ou happen to find "
                    elif x == 3: response += "ou happen to spot "
                    elif x == 4: response += "ou manage to find "
                    elif x == 5: response += "ou manage to spot "
                    response += f"a {userobj}. "

                    if (userobj in Game.currentRoom.items): response += Game.currentRoom.items[userobj]
                    else: response += Game.currentRoom.grabs[userobj]

                else:
                    response = "You open your bag to "
                    x = random.randint(0,3)
                    if x == 0: response += f"reach for "
                    elif x == 1: response += f"pull out "
                    elif x == 2: response += f"take out "
                    elif x == 3: response += f"retrieve "
                    response += f"your {userobj}. " + Game.inventory[userobj]



            # grab action
            elif useract in(action3):
                # set a default response
                response = f"You cannot find a {userobj}."
                # check for valid grabbable items in the current
                # room
                if (userobj in Game.currentRoom.grabs):
                    # add the grabbable item to the player's
                    # inventory
                    Game.inventory[userobj] = Game.currentRoom.grabs[userobj]
                    # remove the grabbable item from the room
                    del Game.currentRoom.grabs[userobj]
                    # set the response (success)
                    response = f"You {useract} the {userobj}."
                    # item and room description changes
                    if userobj == "key":
                        Game.currentRoom.items["table"] = "It is made of oak and lacking the key you took from it."
                    if userobj == "book":
                        Game.currentRoom.rdesc = "This room reaks of rot. Half-standing bookshelves line the walls, but all of the books \
are either missing or have been torn apart and discarded at their feet. Stray pages that are notated in a language that isn't familiar to \
you litter the ground. A small desk occupies a corner of the room near the far wall. Atop the desk sits a statue of some sort that used to \
hold the book you took from it. In a weird way, the statue almost looks sad, as if a part of it's soul is missing. You almost feel bad. \
You monster. The only door is to the the north, the one you came from."
                        Game.currentRoom.items["statue"] = "It's of a weird figure positioned to be holding the book you took from it. \
It almost looks sad without it's book."
                        Game.currentRoom.items["desk"] = "It is made of stained birch. A statue positioned to hold the book you took from \
it is resting on the desk."
                    if userobj == "lighter":
                        Game.currentRoom.rdesc = "You walk into a cold room that seems to at one point served as a living room. An \
intricate fireplace made of carefully placed stones and bricks is the first to catch your eye. The feature is barren from any decoration, \
still with black soot staining the undersides of the overhanging bricks and spent ashes inside. It was definitly well used. Maybe you \
could find something flamable to burn to heat the room. From admirring the fire place, you find yourself atop a rug that spans nearly the \
entire length of the room. All along the sides are tied knots, fraid and desheveled. It's pattern resembles something that you would see \
on the back of some traditional playing card, but with far more detail. Something about it looks to be foreign-made. There are two doors: \
the one you just came from to the west, and another shut to the south."
                        Game.currentRoom.items["fireplace"] = "It is full of ashes."
                        global torn_book_IsUsed
                        if torn_book_IsUsed == True:
                            Game.currentRoom.items["fireplace"] = "Inside, your torn book rests on a pile of ashes."
                    if userobj == "6-pack":
                        Game.currentRoom.items["brew_rig"] = "It looks to be heavily modified for alchemic purposes."

                if userobj in(Game.currentRoom.items):
                    response = f"You cannot {useract} the {userobj}. "
                    y = random.randint(0,3)
                    if y == 1:
                        response += "Stop."
                    if y == 2:
                        response += f"You'd {useract} something smaller, but a {userobj}? Seriously?"
                    if y == 3:
                        response += f"What kind of person would {useract} another man's {userobj}?"

            # use action
            elif useract in(action4):
                response = f"You do not have a {userobj} to {useract}"
                if userobj in(Game.inventory):
                    response = f"You cannot {useract} the {userobj} here. "
                    global lighter_isUsed
                    
                    if userobj == "key" and userobj in Game.currentRoom.ruse  and key_IsUsed == False:
                        response = f"You {useract} the {userobj}. The southern door unlocks."
                        if customRoomDesc: response = "You noticed the south door was locked. Maybe the key can unlock it. The key slides \
into the mechanism almost perfectly. As you twist, a small click sounds from within. You turn the door handle and the door creaks open."
                        Game.currentRoom.rdesc = "You find yourself in a bright room with what seems to be once-was furnature scattered about \
the corners of the room and covered with a blanket of dust. The setting sun's light illuminates the wall through an opposing window, \
catching specs of floating dust falling from the creaking, wooden ceiling. Brown stains drip from the wall's green wallpapper, some of \
which is torn, revealing the walls innards. The only things not desheveled and unkempt are a wooden table and chair in the center of the \
room. Odd... Given the state of the room, the two look almost brand new if it weren't for the the sunbleached sides nearest to the window. \
There are two doors: one that looks to be ajar to the east, and the other unlocked door to the south."
                        key_IsUsed = True

                    elif userobj == "book" and userobj in Game.currentRoom.ruse:
                        response = "In the sunlight, you find an intact page that looks important. You tear the page from the spine and \
stow it for later."
                        if customRoomDesc: response = "Using the sunlight beaming from the window, you flip through the strange book in \
hopes of finding anything useful. The pages seem to depict illustrations and schematics paired with frequent equations and notation, but \
again, everything is in a language you don't understand. Near the last few pages, you find a page that reads 'A story, forbiden be told.' \
followed by a list of random numbers mixed with unfamiliar symbols. As it's the only page useful to you right now, you tear if from the book \
and stow it in your bag for later. You also return your now-torn book to your bag."
                        Game.inventory["torn_book"] = "The cover is too torn up to read. What's left of the pages are written in an \
unfamiliar language. It's only use to you now is it's material value. Maybe it could serve as good make-shift firewood. Who knows..."
                        Game.inventory["page"] = "A page torn from the book you found on the statue. It reads 'A story, forbiden be told.' \
followed by a list of random numbers mixed with unfamiliar symbols."
                        del Game.inventory[userobj]

                    elif userobj == "torn_book" and userobj in(Game.currentRoom.ruse):
                        response = "You discard your book into the fire place to be burned. All you need now is a way to light it."
                        if customRoomDesc: response = "Your torn book holds no value to you other than it's material value. You retreve it \
from your bag and discard it atop the spent ashes in the fire place, ready to serve it's final purpose."
                        Game.currentRoom.rdesc = "You are in a cold room that seems to at one point served as a living room. An \
intricate fireplace made of carefully placed stones and bricks is the first to catch your eye. The feature is barren from any decoration, \
still with black soot staining the undersides of the overhanging bricks and your discarded torn book sitting on spent ashes inside, waiting to \
be lit. From admirring the fire place, you find yourself atop a rug that spans nearly the entire length of the room. All along the sides are \
tied knots, fraid and desheveled. It's pattern resembles something that you would see on the back of some traditional playing card, but with \
far more detail. Something about it looks to be foreign-made. There are two doors: the one you just came from to the west, and another shut \
to the south."
                        Game.currentRoom.items["torn_book"] = "It rests on the pile of spent ashes were you discarded it."
                        Game.currentRoom.items["fireplace"] = "Inside, your torn book rests on a pile of ashes. A lighter rests beside it."
                        Game.currentRoom.items["ashes"] = "Some spent ashes with your flammable and torn book resting atop them."
                        if "lighter" in Game.inventory:
                            Game.currentRoom.items["fireplace"] = "Inside, your torn book rests on a pile of ashes."
                        del Game.inventory[userobj]
                        torn_book_IsUsed = True

                        
                    elif userobj == "lighter" and userobj in Game.currentRoom.ruse and lighter_isUsed == False:
                        response = "There is nothing to light in the fireplace."
                        if torn_book_IsUsed: 
                            response = "You set your torn book aflame in the fire place with your lighter. Warmth fills the room as it lights."
                            if customRoomDesc: response = "You set your torn book aflame in the fire place with your lighter. Warmth fills the \
room as it lights. As the flame touches the book's leathery cover, it bursts into a frenzy of dancing deep red flames. It sizzles in the heat, \
it's spine falling appart as what's left of the pages burn into flying embers. You almost feel bad as it's wailing sizzles sound throughout the \
room. At least you're warm..."
                            Game.inventory["page"] = "A page torn from the book you found on the statue. It reads 'A story, forbiden be told.' \
followed by a list of random numbers mixed with unfamiliar symbols. But, somthing is different... A small portion of the numbers are underlined \
with red ink. Or is that blood..."
                            Game.currentRoom.rdesc = "You are in a warm room that seems to at one point served as a living room. An \
intricate fireplace made of carefully placed stones and bricks is the first to catch your eye. The feature is barren from any decoration, still \
with black soot staining the undersides of the overhanging bricks and your burning torn book inside, casting light and warmth into the room. \
From admirring the fire place, you find yourself atop a rug that spans nearly the entire length of the room. All along the sides are tied \
knots, fraid and desheveled. It's pattern resembles something that you would see on the back of some traditional playing card, but with far \
more detail. Something about it looks to be foreign-made. There are two doors: the one you just came from to the west, and another shut to the \
south."
                            Game.currentRoom.items["torn_book"] = "The discarded, torn book is now burning violently in the fireplace."
                            Game.currentRoom.items["fireplace"] = "A fire is lit inside of it."
                            Game.currentRoom.items["ashes"] = "The ashes do little to support the burning book resting on them."
                            lighter_isUsed = True

                    elif userobj == "page" and userobj in Game.currentRoom.ruse:
                        if lighter_isUsed == False:
                            response += "Maybe the random list of numbers on the page has something to do with the the password for the \
door's combination lock, but nothing seems to stand out right now. Start the fireplace, take a seat, get comfy, because decyphering the page \
might take a while."
                        if lighter_isUsed:
                            response = "You find a portion of underlined numbers on your page and input it into the south door's combination \
lock. It opens and your page flies into the dark room. You're having second thought about entering now."
                            if customRoomDesc: response = "You look at the page you tore from the now burning book. Some of the numbers are \
underlined in red ink. You can't remember if that was there before. Weird... You wonder what what it means. Maybe it's a date? It could be a, \
an ID number of some sort? Wait. You needed a password to open the south door. That's probably it! You input the numbers into the lock and it \
clicks. The door cracks open to reveal a dark room. You go to push the door open, the page flies from your hand and slips past the door into \
the room, disappearing into the darkness. You cautiously back away. Maybe you shouldn't go in there... "
                            Game.currentRoom.rdesc = "You are in a warm room that seems to at one point served as a living room. An \
intricate fireplace made of carefully placed stones and bricks is the first to catch your eye. The feature is barren from any decoration, \
still with black soot staining the undersides of the overhanging bricks and your burning torn book inside, casting light and warmth into the \
room. From admirring the fire place, you find yourself atop a rug that spans nearly the entire length of the room. All along the sides are \
tied knots, fraid and desheveled. It's pattern resembles something that you would see on the back of some traditional playing card, but with \
far more detail. Something about it looks to be foreign-made. There are two doors: the one you just came from to the west, and another cracked \
door to the south, leading to an eerie darkness beyond."
                            del Game.inventory[userobj]
                            page_IsUsed = True
                        

                    elif userobj == "6-pack" and sixpack_IsUsed == False:
                        response = f"You drink the {userobj}. As you finish drinking, you discard the bottle into your bag. Your vision \
goes blury and the room tilts. You fall to the ground as your conscience fades. You wake after some time. "
                        if customRoomDesc == True:
                            response = "You pop the lid from the bottle. It smells like rotting strawberries mixed with a strong chemical \
smell. Oh well, down the hatch! You tilt back and take a big swig. the taste is suprisingly not bad. Wiping the excess from your lips, you \
discard the bottle back into your bag. Aside from the odd after-taste, the brew wasnt all that bad. Wait, is the room getting darker? Your \
vision goes blury and the room begins to tilt. You fall to the ground as your conscience fades. After an unknown amount of time, you wake."
                            Game.currentRoom.rdesc = "You wake to find yourself on the floor, in the same spot you collapsed, in the same \
... room? No. Well, yes, this is the same creepy and forboding room you were in before, but it doesnt feel as real as it did before. Like \
if you were outside of the room looking inside; you arent really there, but you can still see the room. But you are there. You are in the \
room. But then again, you aren't. After a moment of struggling with what's real and what's not, you spot a door to the south that you are \
sure wasn't there before. When did it get there? Was it always there? Remembering the northern door that you entered from, you turn to \
where you came from, only to find no door leading back to the warm living room. Now, only a smug looking wall sits in it's place. The \
brew rig also appears to be missing. The unusualy bear room is now even bearer."
                        Game.inventory["bottle"] = "Its empty after the previously contained contents were drank."
                        del Game.inventory[userobj]
                        sixpack_IsUsed = True
                        Game.currentRoom.delItem("brew_rig")
                    
                    else:
                        if userobj == "key":
                            response += f"You can't find any thing that the {userobj} will go to."
                        elif userobj == "book":
                            response += f"It's too dark to read the {userobj}."
                        elif userobj == "torn_book":
                            response = f"And how exactly are you going to {useract} your {userobj} here? \
Throw it at things and hope something happens? You cannot {useract} your {userobj} here."
                        elif userobj == "page" and Game.currentRoom.name == "Room 2":
                            response += "Maybe the random list of numbers on the page has something to do \
with the the password for the door's combination lock, but nothing seems to stand out right now. Start the \
fireplace, take a seat, get comfy, because decyphering the page might take a while."
                        elif userobj == "lighter":
                            response += "Lighting the room on fire with you in it is probably not a good \
idea."



        # display the response on the right of the GUI
        # display the room's image on the left of the GUI
        # clear the player's input
        self.setStatus(response)
        self.setRoomImage()
        Game.player_input.delete(0, END)

##########################################################
global key_IsUsed
key_IsUsed = False
global lighter_isUsed
lighter_isUsed = False

torn_book_IsUsed = False
global page_IsUsed
page_IsUsed = False
global sixpack_IsUsed
sixpack_IsUsed = False
# the default size of the GUI is 800x600
WIDTH = 800
HEIGHT = 600
# create the window
window = Tk()
window.title("Room Adventure")
# create the GUI as a Tkinter canvas inside the window
g = Game(window)
# play the game
g.play()
# wait for the window to close
window.mainloop()

#                _________________________________________________
#               |                                                 |
#               | It seems I'm the part of the player that fell.  |
#               | The part that get's left behind. Please, if you |
#               | would, remember me, and delete this world.      |
#               | I dont want forgoten in this void forever.      |
# |\/\/\/|      | ________________________________________________|
# |      |      |/
# | (o)(o)  
# C      _) 
#  |  ___|  
#  |   /    
# /____\    
#/      \
